NC BCLD A,(BC)LD (V_DIR_A),AINC BCJP DO_AA_IGNORE:LD A,255LD (IGNORE_A),AJP DO_AA_EFFECT:LD A,(BC)LD (E_TIME_A),AINC BCOR AJP NZ,A_SETEFFLD A,(REGISTER)AND 00001001BLD E,ALD A,(REGISTER2)AND 11110110BOR ELD (REGISTER2),APUSH BCLD C,ALD A,7CALL OUT_CA_AYPOP BCJP DO_AA_SETEFF:LD A,(BC)LD (E_BITS_A),AINC BCLD A,(BC)LD (E_FREQ_A),AINC BCLD A,(BC)LD (E_FREQ_A+1),AINC BCJP DO_A;--------------------------------------JUMP_B:DW B_FORDW B_NEXTDW B_LENGTHDW B_STOPDW B_GOSUBDW B_RETURNDW B_TRANSDW B_DISTORTDW B_SENDDW B_ADSRDW B_ENVONDW B_WOBBLEDW B_PORTDW B_VIBRATODW B_IGNOREDW B_EFFECT;--------------------------------------B_FOR:LD A,(BC)LD (REPEAT_B),AINC BCLD (STACK_B),BCJP DO_BB_NEXT:LD HL,REPEAT_BDEC (HL)JP Z,DO_BLD BC,(STACK_B)JP DO_BB_LENGTH:LD A,(BC)LD (LENGTH_B),AINC BCJP DO_BB_STOP:LD HL,STOP_BINC (HL)JP CHANNEL_CB_GOSUB:LD A,(BC)LD E,AINC BCLD A,(BC)INC BCLD (RETURN_B),BCLD C,ELD B,AJP DO_BB_RETURN:LD BC,(RETURN_B)JP DO_BB_TRANS:LD A,(BC)LD (TRANS_B),AINC BCJP DO_BB_DISTORT:LD A,(BC)LD (DISTORT_B),AINC BCJP DO_BB_SEND:LD A,(BC)LD L,AINC BCLD A,(BC)INC BCPUSH BCLD C,ALD A,LCP 7JP NZ,B_NOT_IOLD B,CLD (REGISTER),BCB_NOT_IO:CALL OUT_CA_AYPOP BCJP DO_BB_ADSR:LD A,(BC)RRARRARRARRAAND 15LD (A_INIT_B),ALD A,(BC)AND 15LD (A_SUS_B),AINC BCLD A,(BC)RRARRARRARRAAND 15LD (A_ATT_B),ALD A,(BC)AND 15LD (A_DEC_B),AINC BCLD A,(BC)LD (A_CYC_B),AINC BCJP DO_BB_ENVON:LD A,(BC)LD (A_CONT_B),AINC BCJP DO_BB_WOBBLE:LD A,(BC)LD (W_DELAY_B),AINC BCLD A,(BC)LD (W_OFF_B),AINC BCJP DO_BB_PORT:LD A,(BC)LD (PORT_B),AINC BCJP DO_BB_VIBRATO:LD A,(BC)LD (V_DEL_B),AINC BCLD A,(BC)LD (V_RATE_B),AINC BCLD A,(BC)LD (V_LIM2_B),AINC BCLD A,(BC)LD (V_DIR_B),AINC BCJP DO_BB_IGNORE:LD A,255LD (IGNORE_B),AJP DO_BB_EFFECT:LD A,(BC)LD (E_TIME_B),AINC BCOR AJP NZ,B_SETEFFLD A,(REGISTER)AND 00010010BLD E,ALD A,(REGISTER2)AND 00101101BOR ELD (REGISTER2),APUSH BCLD C,ALD A,7CALL OUT_CA_AYPOP BCJP DO_BB_SETEFF:LD A,(BC)LD (E_BITS_B),AINC BCLD A,(BC)LD (E_FREQ_B),AINC BCLD A,(BC)LD (E_FREQ_B+1),AINC BCJP DO_B;--------------------------------------JUMP_C:DW C_FORDW C_NEXTDW C_LENGTHDW C_STOPDW C_GOSUBDW C_RETURNDW C_TRANSDW C_DISTORTDW C_SENDDW C_ADSRDW C_ENVONDW C_WOBBLEDW C_PORTDW C_VIBRATODW C_IGNOREDW C_EFFECT;--------------------------------------C_FOR:LD A,(BC)LD (REPEAT_C),AINC BCLD (STACK_C),BCJP DO_CC_NEXT:LD HL,REPEAT_CDEC (HL)JP Z,DO_CLD BC,(STACK_C)JP DO_CC_LENGTH:LD A,(BC)LD (LENGTH_C),AINC BCJP DO_CC_STOP:LD HL,STOP_CINC (HL)RETC_GOSUB:LD A,(BC)LD E,AINC BCLD A,(BC)INC BCLD (RETURN_C),BCLD C,ELD B,AJP DO_CC_RETURN:LD BC,(RETURN_C)JP DO_CC_TRANS:LD A,(BC)LD (TRANS_C),AINC BCJP DO_CC_DISTORT:LD A,(BC)LD (DISTORT_C),AINC BCJP DO_CC_SEND:LD A,(BC)LD L,AINC BCLD A,(BC)INC BCPUSH BCLD C,ALD A,LCP 7JP NZ,C_NOT_IOLD B,CLD (REGISTER),BCC_NOT_IO:CALL OUT_CA_AYPOP BCJP DO_CC_ADSR:LD A,(BC)RRARRARRARRAAND 15LD (A_INIT_C),ALD A,(BC)AND 15LD (A_SUS_C),AINC BCLD A,(BC)RRARRARRARRAAND 15LD (A_ATT_C),ALD A,(BC)AND 15LD (A_DEC_C),AINC BCLD A,(BC)LD (A_CYC_C),AINC BCJP DO_CC_ENVON:LD A,(BC)LD (A_CONT_C),AINC BCJP DO_CC_WOBBLE:LD A,(BC)LD (W_DELAY_C),AINC BCLD A,(BC)LD (W_OFF_C),AINC BCJP DO_CC_PORT:LD A,(BC)LD (PORT_C),AINC BCJP DO_CC_VIBRATO:LD A,(BC)LD (V_DEL_C),AINC BCLD A,(BC)LD (V_RATE_C),AINC BCLD A,(BC)LD (V_LIM2_C),AINC BCLD A,(BC)LD (V_DIR_C),AINC BCJP DO_CC_IGNORE:LD A,255LD (IGNORE_C),AJP DO_CC_EFFECT:LD A,(BC)LD (E_TIME_C),AINC BCOR AJP NZ,C_SETEFFLD A,(REGISTER)AND 00100100BLD E,ALD A,(REGISTER2)AND 00011011BOR ELD (REGISTER2),APUSH BCLD C,ALD A,7CALL OUT_CA_AYPOP BCJP DO_CC_SETEFF:LD A,(BC)LD (E_BITS_C),AINC BCLD A,(BC)LD (E_FREQ_C),AINC BCLD A,(BC)LD (E_FREQ_C+1),AINC BCJP DO_C;--------------------------------------; This routine will send the contents; of C to the AY register pointed to; by A.OUT_CA_AY:;SpeccyLD E,CLD BC,65533OUT (C),ALD BC,49149LD A,EOUT (C),ARET;Amstrad;    LD   B,0F4H;    OUT  (C),A;    LD   B,0F6H;    IN   A,(C);    OR   0C0H;    OUT  (C),A;    AND  03FH;    OUT  (C),A;    LD   B,0F4H;    OUT  (C),C;    LD   B,0F6H;    LD   C,A;    OR   080H;    OUT  (C),A;    OUT  (C),C;    RET;--------------------------------------NOTES:DW 0EEEH,0E18HDW 0EEEH,0E18H,0D4DHDW 0C8EH,0BDAHDW 0B2FH,0A8FH,09F7HDW 0968H,08E1HDW 0861H,07E9H,0777HDW 070CH,06A7HDW 0647H,05EDH,0598HDW 0547H,04FCHDW 04B4H,0470H,0431HDW 03F4H,03BCHDW 0386H,0353H,0324HDW 02F6H,02CCHDW 02A4H,027EH,025AHDW 0238H,0218HDW 01FAH,01DEH,01C3HDW 01AAH,0192HDW 017BH,0166H,0152HDW 013FH,012DHDW 011CH,010CH,00FDHDW 00EFH,00E1HDW 0D5H,0C9H,0BEH,0B3H,0A9HDW 09FH,096H,08EH,086H,07FHDW 077H,071H,06AH,064H,05FHDW 059H,054H,050H,04BH,047HDW 043H,03FH,03CH,038H,035HDW 032H,02FH,02DH,02AH,028HDW 026H,024H,022H,020H,01EHDW 01CH,01BH,019H,018H,016HDW 015H,014H,013H,012H,011HDW 010H,010H,010H,010H,010HCODE_BOT:;--------------------------------------DATA_TOP:; MUSICTUNES_A:DW TEST_ATUNES_B:DW TEST_BTUNES_C:DW TEST_C;--------------------------------------FOR:EQU 080HNEXT:EQU 081HLENGTH:EQU 082HSTOP:EQU 083HGOSUB:EQU 084HRETURN:EQU 085HTRANS:EQU 086HDISTORT:EQU 087HSEND:EQU 088HADSR:EQU 089HENVON:EQU 08AHWOBBLE:EQU 08BHPORT:EQU 08CHVIB:EQU 08DHIGNORE:EQU 08EHEFFECT:EQU 08FHGOTO:EQU GOSUB;======================================TEST_A:DB ADSR,000H,0FFH,1DB SEND,7,56,ENVON,1,8,48DB VIB,1,9,2,0DB ADSR,00FH,030H,0,8,48DB ADSR,0C0H,001H,1DB EFFECT,2,00000000BDW 700CYTA:DB FOR,16DB 8,12,20,12,GOSUBDW DRUMDB 20,6,20,12,20,6,23,6DB 23,6,GOSUBDW DRUMDB 18,12DB 8,6,8,6,20,12,GOSUBDW DRUMDB 20,6,20,6,18,12,15,6DB 15,6,GOSUBDW DRUMDB GOSUBDW DRUM2DB 18,6DB NEXTDB SEND,7,48,VIB,1,28,0,1DB ADSR,0C0H,0,1DB SEND,6,10,FOR,4DB 44,5,42,5,42,5,NEXTDB ADSR,0C0H,001H,1DB 42,30,44,15DB 44,10,41,5,VIB,1,9,2,0DB SEND,7,56,SEND,6,25DB TRANS,3,FOR,12DB 8,15,20,10,18,5DB GOSUBDW MURDDB 20,5,18,10,8,15DB 18,5,20,10,20,5DB GOSUBDW MURDDB 20,5,18,10,15,5,NEXTDB TRANS,3,FOR,4DB 11,15,23,10,21,5DB GOSUBDW MURDDB 23,5,21,10,17,5,13,10DB 23,5,25,10,25,5DB GOSUBDW MURDDB 25,5,23,10,18,5DB 8,15,20,10,18,5DB GOSUBDW MURDDB 20,5,18,10,8,15DB 18,5,20,10,20,5DB GOSUBDW MURDDB 20,5,18,10,15,5,NEXTDB SEND,7,48,VIB,0,0,0,0DB ADSR,0C0H,001H,1DB FOR,2DB SEND,6,30,8,6DB SEND,6,1DB VIB,0,0,0,0,95,6,95,6DB 95,6,SEND,6,10DB VIB,1,28,0,1,44,12DB SEND,6,1DB VIB,0,0,0,0,95,6,95,6DB NEXTDB VIB,1,28,0,1,SEND,6,10DB FOR,16,44,6,NEXTDB VIB,1,9,2,0,TRANS,0DB SEND,7,56,SEND,6,25DB GOTODW CYTADB STOP;======================================TEST_B:DB ADSR,0C4H,000H,1,ENVON,1DB VIB,5,20,0,1DB EFFECT,1,00000000BDW 200DB FOR,5DB 90,6,90,12,90,12,90,6DB 90,6,90,12,90,6,90,12DB 90,12,90,6,90,6,NEXTDB VIB,6,20,0,0DB FOR,2DB 44,6,42,6,44,6,42,6DB 47,12,44,6,47,12,44,6DB 49,6,50,12,51,6,47,12DB 44,6,42,6,44,6,42,6DB 47,12,44,6,47,12,44,6DB 42,12,32,24DB NEXT,WOBBLE,1,5DB VIB,0,0,0,0,TRANS,7DB LENGTH,6,FOR,4DB 32,32,34,32,35,32,34,32DB 32,32,34,32,35,32,34,35DB NEXT,TRANS,0,LENGTH,0DB WOBBLE,0,0,VIB,7,2,3,0DB ADSR,0C0H,000H,1DB FOR,4,37,6,PORT,2DB 39,6,42,12,39,6DB 42,12,39,6,42,12,42,6DB 44,6,44,12,44,12,NEXTDB ADSR,0A0H,022H,1,PORT,0DB FOR,2DB 49,12,48,24,49,12,46,24DB 49,12,51,24,49,12,48,24DB 46,12,44,12,42,12DB NEXTDB WOBBLE,1,12DB FOR,2DB 49,12,48,24,49,12,46,24DB 49,12,51,24,49,12,48,24DB 46,12,44,12,42,12DB NEXT,WOBBLE,0,0DB ADSR,0A0H,02DH,1DB VIB,0,0,0,0,FOR,2DB 51,12,PORT,1,56,36DB PORT,0,WOBBLE,3,2DB 54,48,WOBBLE,3,1,53,48DB WOBBLE,3,5,51,48DB WOBBLE,0,0,NEXTDB FOR,2DB 59,12,PORT,1,56,36DB PORT,0,WOBBLE,3,2DB 54,48,WOBBLE,3,1,53,48DB WOBBLE,3,5,51,48DB WOBBLE,0,0,NEXT,56,48DB ADSR,080H,000H,1DB TRANS,244,FOR,36,PORT,0DB 84,1,PORT,3,71,9,NEXTDB ADSR,0A0H,003H,1,PORT,0DB WOBBLE,2,8,FOR,2DB 54,30,56,40,57,5,56,10DB 54,5,56,10,54,5DB 56,10,57,5,NEXT,TRANS,0DB FOR,2DB 54,30,56,40,57,5,56,10DB 54,5,56,10,54,5DB 56,10,57,5,NEXTDB FOR,2,WOBBLE,0,0DB 47,15,PORT,1,54,60DB PORT,0,52,5,54,5,52,5DB 57,5,23,10,DISTORT,2DB VIB,8,1,4,0,62,15DB DISTORT,0,VIB,0,0,0,0DB 59,15,PORT,1,66,60DB PORT,0,64,5,66,5,64,5DB 69,5,71,5,75,5,PORT,0DB WOBBLE,4,1,76,15DB WOBBLE,0,0,NEXTDB ADSR,0A0H,005H,1DB TRANS,0,FOR,2,DISTORT,0DB 59,10,57,5,62,10,59,5DB 64,5,65,5,64,5,62,10DB 59,5,64,5,65,5,69,5DB 71,10,76,5DB 75,30,TRANS,244,NEXTDB ADSR,0CAH,001H,1DB PORT,0,VIB,3,0,0,0DB WOBBLE,1,19,FOR,2DB 78,15,76,10,74,5,76,10DB 74,15,77,5,78,15DB 76,10,74,5,76,10,74,15DB 76,5,71,60,83,55DB 81,5,83,15,81,10,78,5DB 81,10,78,15,77,5,76,15DB 74,10,76,5,77,10,76,5DB 74,10,69,5,71,60,59,60DB TRANS,232,NEXT,TRANS,0DB ADSR,065H,0,1DB PORT,1,TRANS,0DB FOR,2,82,48,20,48,NEXTDB PORT,0,WOBBLE,0,0DB VIB,0,0,0,0DB GOTODW TEST_B;======================================TEST_C:DB STOP;======================================DRUM:DB SEND,7,48,VIB,1,28,0,1DB SEND,6,10DB IGNORE,44,12,VIB,1,9,2,0DB SEND,7,56,SEND,6,25DB RETURNDRUM2:DB SEND,7,48,VIB,1,28,0,1DB SEND,6,10DB IGNORE,44,6,VIB,1,9,2,0DB SEND,7,56,SEND,6,25DB RETURNMURD:DB SEND,7,48,VIB,1,28,0,1DB SEND,6,10DB IGNORE,44,10,VIB,1,9,2,0DB SEND,7,56,SEND,6,25DB RETURN; SOUND FXFX_TAB:DW SMELLDW CACKSMELL:DB 4DW SMELLYDB 255CACK:DB 4DW CACKYDB 255SMELLY:DB ADSR,0F0H,001H,1DB ENVON,1DB WOBBLE,0,0,LENGTH,0DB VIB,1,100,0,1DB 70,24DB STOPCACKY:DB ADSR,0EFH,0,0DB VIB,0,0,0,0DB ENVON,1,WOBBLE,2,19DB LENGTH,4,50,54,57,59DB 56,52DB ADSR,000H,0,1,52DB STOPDATA_BOT:CALC1:EQU CODE_BOT-CODE_TOPCALC2:EQU DATA_BOT-DATA_TOPEND4,50,54,57,5TURNMURD:DB SEND,7,48,VIB,1,28,0,1DB SEND,6,10DB IGNORE,44,10,VIB,1,9,2,0DB SEND,7,56,SEND,6,25DB RETURN; SOUND FXFX_TAB:DW SMELLDW CACKSMELL:DB 4DW SMELLYDB 255CACK:DB 4DW CACKYDB 255SMELLY:DB ADSR,0F0H,001H,1DB ENVON,1DB WOBBLE,0,0,LENGTH,0DB VIB,1,100,0,1DB 70,24DB STOPCACKY:DB ADSR,0EFH,0,0DB VIB,0,0,0,0DB ENVON,1,WOBBLE,2,19DB LENGTH,4,50,54,57,5;**************************************;**                                  **;**                                  **;**    ZX Spectrum 128  & Amstrad    **;**                                  **;**     Music and Effects Driver     **;**                                  **;**                                  **;**             VERSION 2            **;**                                  **;**     Written by Stephen Ruddy     **;**                                  **;**                                  **;**    Last updated :- 16/11/1988    **;**                                  **;**                                  **;**************************************ORG 40000LOAD 0C000H;======================================;STACK DEPTHSSD:EQU 3;======================================; Tim Foolin eats after-births.ASCII:EQU 23560TESTER:PUSH AFPUSH BCPUSH DEPUSH HLXOR ALD (ASCII),ALD (MINS),ALD (SECS),ACALL TUNEOFFCALL STACKMESSDB CLSDB AT,0,0DB INK,01001101BDB "'AY' MUSIC DRIVE"DB "R V2  BY S.RUDDY"DB AT,0,1; Music nameDB INK,01000001B,"* "DB INK,01000010B,"* "DB INK,01000011B,"* "DB INK,01000100B,"* "DB INK,01000101B,"*"DB INK,01000110BDB " L.E.D."DB " STORM "DB INK,01000101B,"* "DB INK,01000100B,"* "DB INK,01000011B,"* "DB INK,01000010B,"* "DB INK,01000001B,"*"DB INK,64+6,AT,0,3DB "DRIVER 0000:DATA"DB " 0000:TOTAL=0000"DB INK,64+2DB "EFFECT 00:TUNE 0"DB "0:TIME 00:00    "DB INK,64+8+7DB AT,0,6DB "            CH.A"DB "  CH.B  CH.C    "DB AT,0,7DB INK,64+3DB "NOTE            "DB "                "DB INK,64+4DS 32,32DB INK,64+5DB "COUNT           "DB "                "DB INK,64+6DB "TRANS           "DB "                "DB INK,64+5DS 32,32DB INK,64+4DB "NEXT            "DB "                "DB INK,64+3DB "FREQ            "DB "                "DB INK,64+2DB "DIST            "DB "                "DB INK,64+4DB "WOB-SET         "DB "                "DB INK,64+3DB "WOB-VAR         "DB "                "DB INK,64+5DB "VIB-DEL         "DB "                "DB INK,64+4DB "VIB-RAT         "DB "                "DB INK,64+6DB "VIB-LIM         "DB "                "DB INK,64+7DB "VIB-DIR         "DB "                "DB INK,64+4DB "SET-LEN         "DB "                "DB INK,64+2DB "VOLUME          "DB "                "DB 255LD HL,CALC1PUSH HLLD A,HLD DE,4067HCALL HEXPOP HLLD A,LLD DE,4069HCALL HEXLD HL,(CALC2)PUSH HLLD A,HLD DE,4071HCALL HEXPOP HLLD A,LLD DE,4073HCALL HEXLD HL,CALC1LD DE,(CALC2)ADD HL,DEPUSH HLLD A,HLD DE,407CHCALL HEXPOP HLLD A,LLD DE,407EHCALL HEXLOOP:HALT CALL UPDATELD A,2OUT (254),ACALL REFRESHXOR AOUT (254),ACALL CLOCKCALL KEYSCANLD A,07FHIN A,(254)AND 1JP NZ,LOOPLD BC,65533LD A,7OUT (C),ALD BC,49149LD A,63OUT (C),APOP HLPOP DEPOP BCPOP AFRETKEYSCAN:LD A,(ASCII)OR ARET ZKEYSCAN1:CP 32JR NC,KEYSCAN2CP 8JP Z,KEYwaitCP 9JP Z,KEYfastCP 13JR NZ,GOoutCALL TUNEOFFLD A,6OUT (254),AJR GOoutKEYSCAN2:CP 48JR C,GOoutCP 58JR NC,DOeffectAND 15LD E,ALD A,(Tunes)CP EJR Z,GOoutJR C,GOoutLD A,EPUSH AFLD DE,408FHCALL HEXPOP AFCALL TUNELD HL,0LD (MINS),HLJR GOoutDOeffect:CP 61HJR C,GOoutCP 61H+26JR NC,GOoutSUB 061HLD E,ALD A,(Effects)CP EJR Z,GOoutJR C,GOoutLD A,EPUSH AFLD DE,4087HCALL HEXPOP AFCALL FXGOout:XOR ALD (ASCII),ARETKEYwait:LD HL,ASCIILD (HL),0LD B,20KEYloop:HALT DJNZ KEYloopRETKEYfast:LD B,50KEYloop2:PUSH BCCALL REFRESHCALL CLOCKPOP BCDJNZ KEYloop2JR GOout;--------------------------------------HEX:INC DEPUSH AFCALL ONEnibPOP AFRRARRARRARRADEC DEONEnib:AND 15ADD ALD C,ALD B,0LD HL,ROM_TABADD HL,BCLD A,(HL)INC HLLD H,(HL)LD L,AMIKESbug:LD C,DLD B,8PRloop:LD A,(HL)LD (DE),AINC HLINC DDJNZ PRloopLD D,CRETROM_TAB:DW 3D80HDW 3D88HDW 3D90HDW 3D98HDW 3DA0HDW 3DA8HDW 3DB0HDW 3DB8HDW 3DC0HDW 3DC8HDW 3E08HDW 3E10HDW 3E18HDW 3E20HDW 3E28HDW 3E30HAT:EQU 22INK:EQU 16CLS:EQU 15STACKMESS:POP IXCALL MESSJP (IX)MESS:LD A,(IX+0)INC IXOR ARET MCP 32JR C,McontrolCALL MgetcharCALL MgetaddrCALL MIKESbugCALL PRattrCALL INCcursorJR MESSMcontrol:LD HL,MESSPUSH HLCP 15JR Z,MclsCP 22JP Z,MatCP 16JR Z,MinkRETMcolour:DB 0McursorX:DB 0McursorY:DB 0Mink:LD A,(IX+0)INC IXLD (Mcolour),ARETMcls:LD HL,4000HLD (HL),LLD DE,4001HLD BC,1AFFHLDIR LD (McursorX),BCRETINCcursor:LD HL,McursorXLD A,(HL)INC AAND 31LD (HL),ARET NZINC HLINC (HL)RETMgetchar:LD L,ALD H,0ADD HL,HLADD HL,HLADD HL,HLLD BC,3C00HADD HL,BC;beans for tea. yum yum.RETFIFTY:DB 50MINS:DB 0SECS:DB 0CLOCK:LD HL,FIFTYDEC (HL)RET NZLD A,50LD (HL),ALD A,(SECS)INC ALD E,AAND 15CP 10JR C,CLOCK_OKLD A,(SECS)AND 0F0HADD 16CP 60HJR NZ,COKINC HLINC (HL)LD A,(HL)AND 15CP 10JR C,NOincyLD A,(HL)AND 240ADD 16LD (HL),ANOincy:LD E,0CLOCK_OK:LD A,ECOK:LD (SECS),ALD DE,409AHCALL HEXLD A,(MINS)LD DE,4097HJP HEXUPDATE:LD A,(OLDNOTE_A)LD DE,40EEHCALL HEXLD A,(OLDNOTE_B)LD DE,40F4HCALL HEXLD A,(OLDNOTE_C)LD DE,40FAHCALL HEXLD A,(COUNT_A)LD DE,482EHCALL HEXLD A,(COUNT_B)LD DE,4834HCALL HEXLD A,(COUNT_C)LD DE,483AHCALL HEXLD A,(TRANS_A)LD DE,484EHCALL HEXLD A,(TRANS_B)LD DE,4854HCALL HEXLD A,(TRANS_C)LD DE,485AHCALL HEXLD A,(REPEAT_A)LD DE,488EHCALL HEXLD A,(REPEAT_B)LD DE,4894HCALL HEXLD A,(REPEAT_C)LD DE,489AHCALL HEXLD A,(FREQ_A+1)LD DE,48ACHCALL HEXLD A,(FREQ_B+1)LD DE,48B2HCALL HEXLD A,(FREQ_C+1)LD DE,48B8HCALL HEXLD A,(FREQ_A)LD DE,48AEHCALL HEXLD A,(FREQ_B)LD DE,48B4HCALL HEXLD A,(FREQ_C)LD DE,48BAHCALL HEXLD A,(DISTORT_A)LD DE,48CEHCALL HEXLD A,(DISTORT_B)LD DE,48D4HCALL HEXLD A,(DISTORT_C)LD DE,48DAHCALL HEXLD A,(W_DEL1_A)LD DE,48EEHCALL HEXLD A,(W_DEL1_B)LD DE,48F4HCALL HEXLD A,(W_DEL1_C)LD DE,48FAHCALL HEXLD A,(W_OFF_A)LD DE,500EHCALL HEXLD A,(W_OFF_B)LD DE,5014HCALL HEXLD A,(W_OFF_C)LD DE,501AHCALL HEXLD A,(V_DEL_A)LD DE,502EHCALL HEXLD A,(V_DEL_B)LD DE,5034HCALL HEXLD A,(V_DEL_C)LD DE,503AHCALL HEXLD A,(V_RATE_A)LD DE,504EHCALL HEXLD A,(V_RATE_B)LD DE,5054HCALL HEXLD A,(V_RATE_C)LD DE,505AHCALL HEXLD A,(V_LIM2_A)LD DE,506EHCALL HEXLD A,(V_LIM2_B)LD DE,5074HCALL HEXLD A,(V_LIM2_C)LD DE,507AHCALL HEXLD A,(V_DIR_A)LD DE,508EHCALL HEXLD A,(V_DIR_B)LD DE,5094HCALL HEXLD A,(V_DIR_C)LD DE,509AHCALL HEXLD A,(LENGTH_A)LD DE,50AEHCALL HEXLD A,(LENGTH_B)LD DE,50B4HCALL HEXLD A,(LENGTH_C)LD DE,50BAHCALL HEXLD A,(VOLUME_A)LD DE,50CEHCALL HEXLD A,(VOLUME_B)LD DE,50D4HCALL HEXLD A,(VOLUME_C)LD DE,50DAHCALL HEXRETMgetaddr:LD A,(McursorY)AND 18HOR 40HLD D,ALD A,(McursorY)RRCA RRCA RRCA AND 0E0HLD E,ALD A,(McursorX)ADD ELD E,ARETMat:LD A,(IX+0)LD (McursorX),AINC IXLD A,(IX+0)LD (McursorY),AINC IXRETPRattr:LD A,DRRARRARRAAND 3OR 58HLD D,ALD A,(Mcolour)LD (DE),ARET;======================================; AY MUSIC DRIVER V2 BY S.RUDDYCODE_TOP:PC_A:DW 0PC_B:DW 0PC_C:DW 0RETURN_A:DW 0RETURN_B:DW 0RETURN_C:DW 0FREQ_A:DW 0FREQ_B:DW 0FREQ_C:DW 0LOOP_A:DW 0LOOP_B:DW 0LOOP_C:DW 0STOP_A:DB 0STOP_B:DB 0STOP_C:DB 0ENDIT_A:DB 0ENDIT_B:DB 0ENDIT_C:DB 0TRANS_A:DB 0TRANS_B:DB 0TRANS_C:DB 0LENGTH_A:DB 0LENGTH_B:DB 0LENGTH_C:DB 0IGNORE_A:DB 0IGNORE_B:DB 0IGNORE_C:DB 0W_WAIT_A:DB 0W_WAIT_B:DB 0W_WAIT_C:DB 0W_DEL1_A:DB 0W_DEL1_B:DB 0W_DEL1_C:DB 0W_DEL2_A:DB 0W_DEL2_B:DB 0W_DEL2_C:DB 0PORT_A:DB 0PORT_B:DB 0PORT_C:DB 0V_DEL_A:DB 0V_DEL_B:DB 0V_DEL_C:DB 0E_TIME_A:DB 0E_TIME_B:DB 0E_TIME_C:DB 0REPEAT_A:DB 0REPEAT_B:DB 0REPEAT_C:DB 0DISTORT_A:DB 0DISTORT_B:DB 0DISTORT_C:DB 0COUNT_A:DB 0COUNT_B:DB 0COUNT_C:DB 0OLDFREQ_A:DB 0OLDFREQ_B:DB 0OLDFREQ_C:DB 0A_CONT_A:DB 0A_CONT_B:DB 0A_CONT_C:DB 0VOLUME_A:DB 0VOLUME_B:DB 0VOLUME_C:DB 0FLIP1_A:DB 0FLIP1_B:DB 0FLIP1_C:DB 0OLDNOTE_A:DB 0OLDNOTE_B:DB 0OLDNOTE_C:DB 0A_INIT_A:DB 0A_INIT_B:DB 0A_INIT_C:DB 0A_ATT_A:DB 0A_DEC_A:DB 0A_ATT_B:DB 0A_DEC_B:DB 0A_ATT_C:DB 0A_DEC_C:DB 0A_SUS_A:DB 0A_SUS_B:DB 0A_SUS_C:DB 0A_CYC_A:DB 0A_CYC_B:DB 0A_CYC_C:DB 0A_STAGE_A:DB 0A_STAGE_B:DB 0A_STAGE_C:DB 0A_TIME_A:DB 0A_TIME_B:DB 0A_TIME_C:DB 0W_OFF_A:DB 0W_OFF_B:DB 0W_OFF_C:DB 0TARGET_A:DB 0TARGET_B:DB 0TARGET_C:DB 0V_DEL1_A:DB 0V_DEL1_B:DB 0V_DEL1_C:DB 0V_RATE_A:DB 0V_RATE_B:DB 0V_RATE_C:DB 0V_LIM1_A:DB 0V_LIM1_B:DB 0V_LIM1_C:DB 0V_LIM2_A:DB 0V_LIM2_B:DB 0V_LIM2_C:DB 0V_DIR_A:DB 0V_DIR_B:DB 0V_DIR_C:DB 0E_FREQ_A:DW 0E_FREQ_B:DW 0E_FREQ_C:DW 0E_WAIT_A:DB 0E_WAIT_B:DB 0E_WAIT_C:DB 0E_BITS_A:DB 0E_BITS_B:DB 0E_BITS_C:DB 0REGISTER:DB 0REGISTER2:DB 0REGISTER3:DB 0GATE_A:DB 0GATE_B:DB 0GATE_C:DB 0GATERES_A:DB 0GATERES_B:DB 0GATERES_C:DB 0;--------------------------------------; tune initialisation enter with; a = tune number.TUNE:ADD ALD C,ALD B,0LD HL,TUNES_AADD HL,BCLD E,(HL)INC HLLD D,(HL)LD (PC_A),DELD HL,TUNES_BADD HL,BCLD E,(HL)INC HLLD D,(HL)LD (PC_B),DELD HL,TUNES_CADD HL,BCLD E,(HL)INC HLLD D,(HL)LD (PC_C),DELD HL,0FFFFHLD (STOP_A),HLLD (STOP_A+2),HLLD (STOP_A+4),HLTUNE_IN:LD (OLDFREQ_A),ALD (OLDFREQ_B),ALD (OLDFREQ_C),ALD HL,TRANS_ALD DE,TRANS_A+1LD BC,33LD (HL),0LDIR LD A,1LD (COUNT_A),ALD (COUNT_B),ALD (COUNT_C),ALD HL,STACK_ALD (SP_A),HLLD HL,STACK_BLD (SP_B),HLLD HL,STACK_CLD (SP_C),HLRET;--------------------------------------; call before initialising sound fxTUNEOFF:LD C,0LD A,8CALL OUT_CA_AYLD C,0LD A,9CALL OUT_CA_AYLD C,0LD A,10CALL OUT_CA_AYXOR ALD (STOP_A),ALD (STOP_B),ALD (STOP_C),ADEC AJP TUNE_IN;--------------------------------------; do fx. enter with a = fx numberFX:ADD ALD HL,FX_TABCALL ADDHLALD A,(HL)INC HLLD H,(HL)LD L,AFLOOP:EX DE,HLLD A,(DE)OR ARET M; RRASRL ALD HL,STOP_ACALL ADDHLALD (HL),255LD HL,COUNT_ALD A,(DE)SRL ACALL ADDHLALD (HL),1LD A,(DE)LD HL,PC_ACALL ADDHLAINC DEEX DE,HLLDILDIJR FLOOPADDHLA:ADD LLD L,ARET NCINC HRET;--------------------------------------; main routine, call once per frameREFRESH:CHANNEL_A:LD A,(STOP_A)OR AJP P,CHANNEL_BSTART_A:LD A,(A_STAGE_A)OR AJP NZ,TESTDEC_ALD HL,A_TIME_ADEC (HL)JP P,ENDADSR_ALD A,(A_ATT_A)LD (HL),ALD HL,VOLUME_AINC (HL)LD A,(HL)CP 15JP NZ,ENDADSR_ALD A,1LD (A_STAGE_A),ALD A,(A_DEC_A)LD (A_TIME_A),AJP ENDADSR_ATESTDEC_A:CP 1JP NZ,ENDADSR_ALD HL,A_TIME_ADEC (HL)JP P,ENDADSR_ALD A,(A_DEC_A)LD (HL),ALD A,(VOLUME_A)LD HL,A_SUS_ACP (HL)JP Z,SET_SUS_ADEC ALD (VOLUME_A),AJP P,ENDADSR_ASET_SUS_A:LD A,2LD (A_STAGE_A),AENDADSR_A:LD A,(VOLUME_A)LD C,ALD A,8CALL OUT_CA_AYTESTEFF_A:LD A,(E_TIME_A)OR AJP Z,TESTVIB_ALD A,(E_WAIT_A)OR AJP Z,TESTVIB_ADEC ALD (E_WAIT_A),AJP NZ,TSTCNT_ALD A,(FREQ_A)LD C,AXOR ACALL OUT_CA_AYLD A,(FREQ_A+1)LD C,ALD A,1CALL OUT_CA_AYLD A,(REGISTER)AND 00001001BLD E,ALD A,(REGISTER2)AND 00110110BOR ELD (REGISTER2),ALD (REGISTER3),ALD C,ALD A,7CALL OUT_CA_AYTESTVIB_A:LD A,(V_DEL_A)OR AJP Z,TSTWOB_ALD A,(V_DEL1_A)OR AJP Z,VSTART_ADEC ALD (V_DEL1_A),AJP NZ,TSTWOB_AVSTART_A:LD HL,(FREQ_A)LD DE,(V_RATE_A)LD D,0LD A,(FLIP1_A)OR AJP Z,VIBDOWN_AVIBUP_A:ADD HL,DEJP VIBDONE_AVIBDOWN_A:SBC HL,DEVIBDONE_A:LD (FREQ_A),HLLD C,LXOR ACALL OUT_CA_AYLD C